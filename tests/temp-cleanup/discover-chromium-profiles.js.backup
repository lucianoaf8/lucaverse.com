#!/usr/bin/env node

/**
 * üîç Chromium Profile Discovery Tool
 * Discovers available Chromium profiles and tests profile launching
 */

import { execSync } from 'child_process';
import { existsSync, readdirSync } from 'fs';
import path from 'path';

console.log('üîç Chromium Profile Discovery');
console.log('===============================\n');

const chromiumPath = 'C:\\Users\\lucia\\.codeium\\windsurf\\ws-browser\\chromium-1155\\chrome-win\\chrome.exe';
const userDataDir = 'C:\\Users\\lucia\\.codeium\\windsurf\\ws-browser\\chromium-1155\\User Data';

console.log('üü¶ Chromium executable:', chromiumPath);
console.log('üü¶ User Data directory:', userDataDir);

// Check if paths exist
if (!existsSync(chromiumPath)) {
    console.error('‚ùå Chromium executable not found!');
    process.exit(1);
}

if (!existsSync(userDataDir)) {
    console.error('‚ùå User Data directory not found!');
    process.exit(1);
}

console.log('\nüìÅ Scanning for available profiles...');

try {
    // List all directories in User Data that could be profiles
    const items = readdirSync(userDataDir, { withFileTypes: true });
    const profiles = items
        .filter(item => item.isDirectory())
        .map(item => item.name)
        .filter(name => name.startsWith('Profile') || name === 'Default')
        .sort();

    console.log(`\n‚úÖ Found ${profiles.length} potential profiles:`);
    profiles.forEach((profile, index) => {
        console.log(`   ${index + 1}. ${profile}`);
    });

    // Check for specific profile directories
    const specificProfiles = [
        'Default',
        'Profile 1', 
        'Profile 2',
        'Profile 3',
        'Profile 4',
        'Profile 5',
        'Profile 6',
        'Profile 7',
        'Profile 8',
        'Profile 9'
    ];

    console.log('\nüîç Checking specific profile directories:');
    specificProfiles.forEach(profile => {
        const profilePath = path.join(userDataDir, profile);
        const exists = existsSync(profilePath);
        console.log(`   ${profile}: ${exists ? '‚úÖ EXISTS' : '‚ùå NOT FOUND'}`);
    });

    // Try to get profile info via Chromium's local state
    const localStatePath = path.join(userDataDir, 'Local State');
    if (existsSync(localStatePath)) {
        console.log('\nüìÑ Reading Local State for profile info...');
        try {
            const localStateContent = require('fs').readFileSync(localStatePath, 'utf8');
            const localState = JSON.parse(localStateContent);
            
            if (localState.profile && localState.profile.info_cache) {
                console.log('\nüë§ Profile names from Local State:');
                Object.entries(localState.profile.info_cache).forEach(([key, value]) => {
                    console.log(`   ${key}: "${value.name || 'Unnamed'}" (${value.user_name || 'No username'})`);
                });
            }
        } catch (error) {
            console.log('   ‚ö†Ô∏è Could not parse Local State file');
        }
    }

    // Test launching with different profile approaches
    console.log('\nüß™ Testing profile launch approaches...');
    
    const testProfiles = profiles.slice(0, 3); // Test first 3 profiles
    
    for (const profile of testProfiles) {
        console.log(`\nüü¶ Testing launch with profile: ${profile}`);
        try {
            const command = `"${chromiumPath}" --profile-directory="${profile}" --new-window --remote-debugging-port=9224 about:blank`;
            console.log(`   Command: ${command}`);
            
            // Launch and immediately close (just to test if it works)
            execSync(command, { timeout: 3000 });
            console.log(`   ‚úÖ ${profile} - Launch successful`);
        } catch (error) {
            console.log(`   ‚ùå ${profile} - Launch failed: ${error.message}`);
        }
    }

} catch (error) {
    console.error('‚ùå Profile discovery failed:', error.message);
}

console.log('\nüí° Recommendations:');
console.log('1. Use "Default" profile if Profile 7 doesn\'t exist');
console.log('2. Or use one of the existing Profile directories');
console.log('3. Check which profile corresponds to your desired settings');
console.log('\nüîß You can also launch Chromium manually to see which profile you prefer');
